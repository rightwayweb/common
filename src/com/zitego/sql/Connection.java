package com.zitego.sql;

import java.sql.*;
import java.util.Properties;

/**
 * This class is just a wrapper around a vendor's connection object that is used to intercept calls close()
 * so that the pooled connection can be returned to the pool.  All other methods are passthroughs to the wrapped
 * connection, thus in order to use methods in this class, the wrapped connection must be of a jdbc version
 * that supports the method.
 *
 * @author John Glorioso
 * @version $Id: Connection.java,v 1.3 2011/10/16 17:33:19 jglorioso Exp $
 */
public class Connection implements java.sql.Connection
{
    /** The internal connection object. */
    protected java.sql.Connection _conn;
    /** Whether the connection has been closed. */
    protected boolean _beenClosed = false;
    /** The connection factory. */
    protected ConnectionFactory _factory;

    /**
     * Wrap the supplied connection.
     *
     * @param java.sql.Connection The connection.
     */
    public Connection(java.sql.Connection connection)
    {
        _conn = connection;
    }

    /**
     * Wrap the supplied connection.
     *
     * @param java.sql.Connection The connection.
     * @param ConnectionFactory The factory that created it.
     */
    public Connection(java.sql.Connection connection, ConnectionFactory factory)
    {
        _conn = connection;
        _factory = factory;
    }

    public boolean isClosed()
    {
        return _beenClosed;
    }

    public Statement createStatement() throws SQLException
    {
        return _conn.createStatement();
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException
    {
        return _conn.createStatement(resultSetType, resultSetConcurrency);
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException
    {
        return _conn.createStatement(resultSetType, resultSetConcurrency,resultSetHoldability);
    }

    public java.util.Map getTypeMap() throws SQLException
    {
        return _conn.getTypeMap();
    }

    public void setTypeMap(java.util.Map map) throws SQLException
    {
        _conn.setTypeMap(map);
    }

    public PreparedStatement prepareStatement(String stmt) throws SQLException
    {
        return new PreparedStatement( _conn.prepareStatement(stmt) );
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException
    {
        return new PreparedStatement( _conn.prepareStatement(sql, resultSetType, resultSetConcurrency) );
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
    throws SQLException
    {
        return new PreparedStatement( _conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability) );
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException
    {
        return new PreparedStatement( _conn.prepareStatement(sql, autoGeneratedKeys) );
    }

    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException
    {
        return new PreparedStatement( _conn.prepareStatement(sql, columnIndexes) );
    }

    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException
    {
        return new PreparedStatement( _conn.prepareStatement(sql, columnNames) );
    }

    public CallableStatement prepareCall(String call) throws SQLException
    {
        return _conn.prepareCall(call);
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException
    {
        return _conn.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
    throws SQLException
    {
        return _conn.prepareCall(sql, resultSetType, resultSetConcurrency,resultSetHoldability);
    }

    public DatabaseMetaData getMetaData() throws SQLException
    {
        return _conn.getMetaData();
    }

    public void clearWarnings() throws SQLException
    {
        _conn.clearWarnings();
    }

    public void setHoldability(int holdability) throws SQLException
    {
        _conn.setHoldability(holdability);
    }

    public int getHoldability() throws SQLException
    {
        return _conn.getHoldability();
    }

    public Savepoint setSavepoint() throws SQLException
    {
        return _conn.setSavepoint();
    }

    public Savepoint setSavepoint(String name) throws SQLException
    {
        return _conn.setSavepoint(name);
    }

    public void close() throws SQLException
    {
        try
        {
            try
            {
                commit();
            }
            catch(SQLException ignored) { }

            ConnectionFactory factory = _factory;
            if (factory == null) factory = ConnectionFactory.getInstance();
            if (factory != null) factory.returnConnection(this);
            _beenClosed = true;
        }
        catch (Exception e)
        {
            throw new SQLException( new StringBuffer("Could not release connection to pool:\n").append(e).toString() );
        }
    }

    public void commit() throws SQLException
    {
        _conn.commit();
    }

    public void finalize()
    {
        try
        {
            if ( !isClosed() ) close();
        }
        catch (Exception e) { }
    }

    public boolean getAutoCommit() throws SQLException
    {
        return _conn.getAutoCommit();
    }

    public String getCatalog() throws SQLException
    {
        return _conn.getCatalog();
    }

    public int getTransactionIsolation() throws SQLException
    {
        return _conn.getTransactionIsolation();
    }

    public SQLWarning getWarnings() throws SQLException
    {
        return _conn.getWarnings();
    }

    public boolean isReadOnly() throws SQLException
    {
        return _conn.isReadOnly();
    }

    public String nativeSQL(String string) throws SQLException
    {
        return _conn.nativeSQL(string);
    }

    public void rollback() throws SQLException
    {
        _conn.rollback();
    }

    public void rollback(Savepoint savepoint) throws SQLException
    {
        _conn.rollback(savepoint);
    }

    public void releaseSavepoint(Savepoint savepoint) throws SQLException
    {
        _conn.releaseSavepoint(savepoint);
    }

    public void setAutoCommit(boolean flag) throws SQLException
    {
        _conn.setAutoCommit(flag);
    }

    public void setCatalog(String string) throws SQLException
    {
        _conn.setCatalog(string);
    }

    public void setReadOnly(boolean flag) throws SQLException
    {
        _conn.setReadOnly(flag);
    }

    public void setTransactionIsolation(int i) throws SQLException
    {
        _conn.setTransactionIsolation(i);
    }

    public Struct createStruct(String typeName, Object[] attributes) throws SQLException
    {
        return _conn.createStruct(typeName, attributes);
    }

    public Array createArrayOf(String typeName, Object[] elements) throws SQLException
    {
        return _conn.createArrayOf(typeName, elements);
    }

    public Properties getClientInfo() throws SQLException
    {
        return _conn.getClientInfo();
    }

    public String getClientInfo(String name) throws SQLException
    {
        return _conn.getClientInfo(name);
    }

    public void setClientInfo(Properties props) throws SQLClientInfoException
    {
        _conn.setClientInfo(props);
    }

    public void setClientInfo(String name, String prop) throws SQLClientInfoException
    {
        _conn.setClientInfo(name, prop);
    }

    public boolean isValid(int timeout) throws SQLException
    {
        return _conn.isValid(timeout);
    }

    public SQLXML createSQLXML() throws SQLException
    {
        return _conn.createSQLXML();
    }

    public NClob createNClob() throws SQLException
    {
        return _conn.createNClob();
    }

    public Blob createBlob() throws SQLException
    {
        return _conn.createBlob();
    }

    public Clob createClob() throws SQLException
    {
        return _conn.createClob();
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException
    {
        return _conn.isWrapperFor(iface);
    }

    public <T> T unwrap(Class<T> iface) throws SQLException
    {
        return _conn.unwrap(iface);
    }

    public void destroy()
    {
        try
        {
            close();
        }
        catch(SQLException ignored) { }
    }
}
